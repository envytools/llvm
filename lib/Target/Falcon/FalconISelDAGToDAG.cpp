//===-- FalconISelDAGToDAG.cpp - A dag to dag inst selector for Falcon ----===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines a DAG pattern matching instruction selector for Falcon,
// converting from a legalized dag to a Falcon dag.
//
//===----------------------------------------------------------------------===//

#include "Falcon.h"
#include "FalconRegisterInfo.h"
#include "FalconSubtarget.h"
#include "FalconTargetMachine.h"
#include "llvm/CodeGen/MachineConstantPool.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/IntrinsicInst.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Target/TargetMachine.h"
using namespace llvm;

#define DEBUG_TYPE "bpf-isel"

// Instruction Selector Implementation
namespace {

class FalconDAGToDAGISel : public SelectionDAGISel {
public:
  explicit FalconDAGToDAGISel(FalconTargetMachine &TM) : SelectionDAGISel(TM) {}

  const char *getPassName() const override {
    return "Falcon DAG->DAG Pattern Instruction Selection";
  }

private:
// Include the pieces autogenerated from the target description.
#include "FalconGenDAGISel.inc"

  void Select(SDNode *N) override;

  // Complex Patterns for address selection.
  bool SelectMemReg(SDValue Addr, SDValue &Base);
  template<int shift, bool zerook>
  bool SelectMemRegImm(SDValue Addr, SDValue &Base, SDValue &Offset);
  template<int shift>
  bool SelectMemRegReg(SDValue Addr, SDValue &Base, SDValue &Index);
};
}

// ComplexPattern used on Falcon ST instruction
bool FalconDAGToDAGISel::SelectMemReg(SDValue Addr, SDValue &Base) {
  SDLoc DL(Addr);

  Base = Addr;
  return true;
}

// ComplexPattern used on Falcon LD instruction
template<int shift, bool zerook>
bool FalconDAGToDAGISel::SelectMemRegImm(SDValue Addr, SDValue &Base, SDValue &Offset) {
  SDLoc DL(Addr);

  if (Addr.getOpcode() == ISD::ADD) {
    if (ConstantSDNode *CN = dyn_cast<ConstantSDNode>(Addr.getOperand(1))) {
      if (isShiftedUInt<8, shift>(CN->getZExtValue())) {
        Base = Addr.getOperand(0);
        Offset = CurDAG->getTargetConstant(CN->getZExtValue(), SDLoc(CN), Addr.getValueType());
        return true;
      }
    }
  }
  if (zerook) {
    Base = Addr;
    Offset = CurDAG->getTargetConstant(0, DL, Addr.getValueType());
    return true;
  }
  return false;
}

// ComplexPattern used on Falcon LD instruction
template<int shift>
bool FalconDAGToDAGISel::SelectMemRegReg(SDValue Addr, SDValue &Base, SDValue &Idx) {
  SDLoc DL(Addr);

  if (Addr.getOpcode() != ISD::ADD)
    return false;

  if (shift == 0) {
    Base = Addr.getOperand(0);
    Idx = Addr.getOperand(1);
    return true;
  }

  for (int i : {0, 1}) {
    Base = Addr.getOperand(i);
    SDValue Offset = Addr.getOperand(i ^ 1);
    if (Offset.getOpcode() != ISD::SHL)
      continue;
    ConstantSDNode *CN = dyn_cast<ConstantSDNode>(Offset.getOperand(1));
    if (!CN)
      continue;
    if (CN->getZExtValue() != shift)
      continue;
    Idx = Offset.getOperand(0);
    return true;
  }
  return false;
}

void FalconDAGToDAGISel::Select(SDNode *Node) {
  unsigned Opcode = Node->getOpcode();

  // Dump information about the Node being selected
  DEBUG(dbgs() << "Selecting: "; Node->dump(CurDAG); dbgs() << '\n');

  // If we have a custom node, we already have selected!
  if (Node->isMachineOpcode()) {
    DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << '\n');
    return;
  }

  // tablegen selection should be handled here.
  switch (Opcode) {
  default: break;

  // XXX
#if 0
  case ISD::FrameIndex: {
    int FI = cast<FrameIndexSDNode>(Node)->getIndex();
    EVT VT = Node->getValueType(0);
    SDValue TFI = CurDAG->getTargetFrameIndex(FI, VT);
    unsigned Opc = Falcon::MOV_rr;
    if (Node->hasOneUse())
      return CurDAG->SelectNodeTo(Node, Opc, VT, TFI);
    return CurDAG->getMachineNode(Opc, SDLoc(Node), VT, TFI);
  }
#endif
  }

  // Select the default instruction
  SelectCode(Node);
}

FunctionPass *llvm::createFalconISelDag(FalconTargetMachine &TM) {
  return new FalconDAGToDAGISel(TM);
}

SDValue FalconTargetLowering::PerformDAGCombine(SDNode *N,
                                                DAGCombinerInfo &DCI) const {
  SelectionDAG &DAG = DCI.DAG;
  SDLoc DL(N);
  unsigned Opcode = N->getOpcode();
  switch (Opcode) {
  case ISD::SRA: {
    SDValue N0 = N->getOperand(0);
    SDValue N1 = N->getOperand(1);
    EVT VT = N0.getValueType();
    if (N0->getOpcode() != ISD::SHL)
      break;
    SDValue N00 = N0->getOperand(0);
    SDValue N01 = N0->getOperand(1);
    if (N1 != N01)
      break;
    if (VT != MVT::i32)
      N00 = DAG.getNode(ISD::ANY_EXTEND, DL, MVT::i32, N00);
    N01 = DAG.getNode(ISD::SUB, DL, MVT::i32, DAG.getConstant(VT.getSizeInBits() - 1, DL, MVT::i32), N01);
    N00 = DAG.getNode(FalconISD::SEXT_SZ, DL, MVT::i32, N00, N01);
    if (VT != MVT::i32)
      N00 = DAG.getNode(ISD::TRUNCATE, DL, VT, N00);
    return N00;
  }
  default:
    break;
  }
  return SDValue();
}
